// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polynomial.proto

#ifndef PROTOBUF_polynomial_2eproto__INCLUDED
#define PROTOBUF_polynomial_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_polynomial_2eproto();
void protobuf_AssignDesc_polynomial_2eproto();
void protobuf_ShutdownFile_polynomial_2eproto();

class Polynomial;

// ===================================================================

class Polynomial : public ::google::protobuf::Message {
 public:
  Polynomial();
  virtual ~Polynomial();

  Polynomial(const Polynomial& from);

  inline Polynomial& operator=(const Polynomial& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polynomial& default_instance();

  void Swap(Polynomial* other);

  // implements Message ----------------------------------------------

  Polynomial* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Polynomial& from);
  void MergeFrom(const Polynomial& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint64 coefs = 1 [packed = true];
  inline int coefs_size() const;
  inline void clear_coefs();
  static const int kCoefsFieldNumber = 1;
  inline ::google::protobuf::int64 coefs(int index) const;
  inline void set_coefs(int index, ::google::protobuf::int64 value);
  inline void add_coefs(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      coefs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_coefs();

  // @@protoc_insertion_point(class_scope:Polynomial)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > coefs_;
  mutable int _coefs_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_polynomial_2eproto();
  friend void protobuf_AssignDesc_polynomial_2eproto();
  friend void protobuf_ShutdownFile_polynomial_2eproto();

  void InitAsDefaultInstance();
  static Polynomial* default_instance_;
};
// ===================================================================


// ===================================================================

// Polynomial

// repeated sint64 coefs = 1 [packed = true];
inline int Polynomial::coefs_size() const {
  return coefs_.size();
}
inline void Polynomial::clear_coefs() {
  coefs_.Clear();
}
inline ::google::protobuf::int64 Polynomial::coefs(int index) const {
  return coefs_.Get(index);
}
inline void Polynomial::set_coefs(int index, ::google::protobuf::int64 value) {
  coefs_.Set(index, value);
}
inline void Polynomial::add_coefs(::google::protobuf::int64 value) {
  coefs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Polynomial::coefs() const {
  return coefs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Polynomial::mutable_coefs() {
  return &coefs_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_polynomial_2eproto__INCLUDED
